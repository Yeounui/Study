# syntax=docker/dockerfile:1.4

# 베이스 이미지로 Ubuntu 22.04 + cuda toolkit 사용
ARG CUDA_VER=cuda12.6.0
ARG LINUX_VER=ubuntu22.04
FROM nvidia/cuda:${CUDA_VER}-base-${LINUX_VER}

ARG LINUX_VER
ARG PYTHON_VER
ARG DEBIAN_FRONTEND=noninteractive
ENV PATH=/opt/conda/bin:$PATH
ENV PYTHON_VERSION=${PYTHON_VER}

SHELL ["/bin/bash", "-euo", "pipefail", "-c"]

# Create a conda group and assign it as root's primary group
RUN <<EOF
groupadd conda
usermod -g conda root
EOF

# Ownership & permissions based on https://docs.anaconda.com/anaconda/install/multi-user/#multi-user-anaconda-installation-on-linux
COPY --from=condaforge/miniforge3:24.3.0-0 --chown=root:conda --chmod=770 /opt/conda /opt/conda

# Ensure new files are created with group write access & setgid. See https://unix.stackexchange.com/a/12845
RUN chmod g+ws /opt/conda

RUN <<EOF
# Ensure new files/dirs have group write permissions
umask 002
# install expected Python version
conda install -y -n base "python~=${PYTHON_VERSION}.0=*_cpython"
conda update --all -y -n base
find /opt/conda -follow -type f -name '*.a' -delete
find /opt/conda -follow -type f -name '*.pyc' -delete
conda clean -afy
EOF

# Reassign root's primary group to root
RUN usermod -g root root

# ensure conda environment is always activated
RUN <<EOF
ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh
echo ". /opt/conda/etc/profile.d/conda.sh; conda activate base" >> /etc/skel/.bashrc
echo ". /opt/conda/etc/profile.d/conda.sh; conda activate base" >> ~/.bashrc
EOF

# tzdata is needed by the ORC library used by pyarrow, because it provides /etc/localtime
RUN <<EOF
    apt-get update
    apt-get upgrade -y
    apt-get install -y --no-install-recommends \
      tzdata locales
    rm -rf "/var/lib/apt/lists/*"
EOF

# Locale 설정
RUN locale-gen ko_KR.UTF-8
ENV LC_ALL ko_KR.UTF-8

# C++ 개발 도구 포함 기본 패키지 설치
RUN <<EOF
    apt-get install -y --no-install-recommends  \
        bzip2 ca-certificates \
        git tini \
        gcc clang cmake \
        libboost-all-dev libssl-dev > /dev/null
    apt-get clean
    rm -rf /var/lib/apt/lists/*
EOF

# Conda Environment (ros_env) 설정
RUN <<EOF
    mamba update --all --yes
    mamba create -n ros_env python=3.11
EOF

# ROS2 (Humble) + jupyter-ros 설치 패키지 설치
RUN <<EOF
    conda config --env --add channels conda-forge
    conda config --env --add channels robostack-staging
    conda config --env --remove channels defaults
    mamba install -n ros_env -y ros-humble-desktop \
    mamba install -n rosdev_env -y compilers cmake pkg-config make ninja colcon-common-extensions catkin_tools rosdep
    conda install -n rosjupyter_env -y jupyter bqplot pyyaml ipywidgets ipycanvas robostack::jupyter-ros
    mamba install -n api_env -y numpy pybind11
EOF

#x11 forwarding 설정
RUN <<EOF
echo "export DISPLAY=$(grep -m 1 nameserver /etc/resolv.conf | awk '{print $2}'):0.0" >> ~/.bashrc
source ~/.bashrc
EOF

# 작업 디렉토리 설정
WORKDIR /workspace

ENTRYPOINT ["tini", "--"]
SHELL ["/bin/bash", "-c"]
CMD [ "/bin/bash", "-c" ]